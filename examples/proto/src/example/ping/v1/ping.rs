// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `connect/ping/v1/ping.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.PingRequest)
pub struct PingRequest {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.PingRequest.number)
    pub number: i64,
    // @@protoc_insertion_point(field:connect.ping.v1.PingRequest.text)
    pub text: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.PingRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PingRequest {
    fn default() -> &'a PingRequest {
        <PingRequest as ::protobuf::Message>::default_instance()
    }
}

impl PingRequest {
    pub fn new() -> PingRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &PingRequest| { &m.number },
            |m: &mut PingRequest| { &mut m.number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &PingRequest| { &m.text },
            |m: &mut PingRequest| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PingRequest>(
            "PingRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PingRequest {
    const NAME: &'static str = "PingRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_int64()?;
                },
                18 => {
                    self.text = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.number);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PingRequest {
        PingRequest::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PingRequest {
        static instance: PingRequest = PingRequest {
            number: 0,
            text: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PingRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PingRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.PingResponse)
pub struct PingResponse {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.PingResponse.number)
    pub number: i64,
    // @@protoc_insertion_point(field:connect.ping.v1.PingResponse.text)
    pub text: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.PingResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PingResponse {
    fn default() -> &'a PingResponse {
        <PingResponse as ::protobuf::Message>::default_instance()
    }
}

impl PingResponse {
    pub fn new() -> PingResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &PingResponse| { &m.number },
            |m: &mut PingResponse| { &mut m.number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &PingResponse| { &m.text },
            |m: &mut PingResponse| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PingResponse>(
            "PingResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PingResponse {
    const NAME: &'static str = "PingResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_int64()?;
                },
                18 => {
                    self.text = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.number);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PingResponse {
        PingResponse::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PingResponse {
        static instance: PingResponse = PingResponse {
            number: 0,
            text: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PingResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PingResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.FailRequest)
pub struct FailRequest {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.FailRequest.code)
    pub code: i32,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.FailRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FailRequest {
    fn default() -> &'a FailRequest {
        <FailRequest as ::protobuf::Message>::default_instance()
    }
}

impl FailRequest {
    pub fn new() -> FailRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &FailRequest| { &m.code },
            |m: &mut FailRequest| { &mut m.code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FailRequest>(
            "FailRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FailRequest {
    const NAME: &'static str = "FailRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FailRequest {
        FailRequest::new()
    }

    fn clear(&mut self) {
        self.code = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FailRequest {
        static instance: FailRequest = FailRequest {
            code: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FailRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FailRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FailRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FailRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.FailResponse)
pub struct FailResponse {
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.FailResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FailResponse {
    fn default() -> &'a FailResponse {
        <FailResponse as ::protobuf::Message>::default_instance()
    }
}

impl FailResponse {
    pub fn new() -> FailResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FailResponse>(
            "FailResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FailResponse {
    const NAME: &'static str = "FailResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FailResponse {
        FailResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FailResponse {
        static instance: FailResponse = FailResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FailResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FailResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FailResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FailResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.SumRequest)
pub struct SumRequest {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.SumRequest.number)
    pub number: i64,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.SumRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SumRequest {
    fn default() -> &'a SumRequest {
        <SumRequest as ::protobuf::Message>::default_instance()
    }
}

impl SumRequest {
    pub fn new() -> SumRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &SumRequest| { &m.number },
            |m: &mut SumRequest| { &mut m.number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SumRequest>(
            "SumRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SumRequest {
    const NAME: &'static str = "SumRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SumRequest {
        SumRequest::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SumRequest {
        static instance: SumRequest = SumRequest {
            number: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SumRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SumRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SumRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SumRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.SumResponse)
pub struct SumResponse {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.SumResponse.sum)
    pub sum: i64,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.SumResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SumResponse {
    fn default() -> &'a SumResponse {
        <SumResponse as ::protobuf::Message>::default_instance()
    }
}

impl SumResponse {
    pub fn new() -> SumResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sum",
            |m: &SumResponse| { &m.sum },
            |m: &mut SumResponse| { &mut m.sum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SumResponse>(
            "SumResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SumResponse {
    const NAME: &'static str = "SumResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sum = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sum != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.sum);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sum != 0 {
            os.write_int64(1, self.sum)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SumResponse {
        SumResponse::new()
    }

    fn clear(&mut self) {
        self.sum = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SumResponse {
        static instance: SumResponse = SumResponse {
            sum: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SumResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SumResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SumResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SumResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.CountUpRequest)
pub struct CountUpRequest {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.CountUpRequest.number)
    pub number: i64,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.CountUpRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountUpRequest {
    fn default() -> &'a CountUpRequest {
        <CountUpRequest as ::protobuf::Message>::default_instance()
    }
}

impl CountUpRequest {
    pub fn new() -> CountUpRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &CountUpRequest| { &m.number },
            |m: &mut CountUpRequest| { &mut m.number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountUpRequest>(
            "CountUpRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountUpRequest {
    const NAME: &'static str = "CountUpRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountUpRequest {
        CountUpRequest::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountUpRequest {
        static instance: CountUpRequest = CountUpRequest {
            number: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountUpRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountUpRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountUpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountUpRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.CountUpResponse)
pub struct CountUpResponse {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.CountUpResponse.number)
    pub number: i64,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.CountUpResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountUpResponse {
    fn default() -> &'a CountUpResponse {
        <CountUpResponse as ::protobuf::Message>::default_instance()
    }
}

impl CountUpResponse {
    pub fn new() -> CountUpResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &CountUpResponse| { &m.number },
            |m: &mut CountUpResponse| { &mut m.number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountUpResponse>(
            "CountUpResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountUpResponse {
    const NAME: &'static str = "CountUpResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountUpResponse {
        CountUpResponse::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountUpResponse {
        static instance: CountUpResponse = CountUpResponse {
            number: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountUpResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountUpResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountUpResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountUpResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.CumSumRequest)
pub struct CumSumRequest {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.CumSumRequest.number)
    pub number: i64,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.CumSumRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CumSumRequest {
    fn default() -> &'a CumSumRequest {
        <CumSumRequest as ::protobuf::Message>::default_instance()
    }
}

impl CumSumRequest {
    pub fn new() -> CumSumRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &CumSumRequest| { &m.number },
            |m: &mut CumSumRequest| { &mut m.number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CumSumRequest>(
            "CumSumRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CumSumRequest {
    const NAME: &'static str = "CumSumRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CumSumRequest {
        CumSumRequest::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CumSumRequest {
        static instance: CumSumRequest = CumSumRequest {
            number: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CumSumRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CumSumRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CumSumRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CumSumRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:connect.ping.v1.CumSumResponse)
pub struct CumSumResponse {
    // message fields
    // @@protoc_insertion_point(field:connect.ping.v1.CumSumResponse.sum)
    pub sum: i64,
    // special fields
    // @@protoc_insertion_point(special_field:connect.ping.v1.CumSumResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CumSumResponse {
    fn default() -> &'a CumSumResponse {
        <CumSumResponse as ::protobuf::Message>::default_instance()
    }
}

impl CumSumResponse {
    pub fn new() -> CumSumResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sum",
            |m: &CumSumResponse| { &m.sum },
            |m: &mut CumSumResponse| { &mut m.sum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CumSumResponse>(
            "CumSumResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CumSumResponse {
    const NAME: &'static str = "CumSumResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sum = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sum != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.sum);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sum != 0 {
            os.write_int64(1, self.sum)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CumSumResponse {
        CumSumResponse::new()
    }

    fn clear(&mut self) {
        self.sum = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CumSumResponse {
        static instance: CumSumResponse = CumSumResponse {
            sum: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CumSumResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CumSumResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CumSumResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CumSumResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aconnect/ping/v1/ping.proto\x12\x0fconnect.ping.v1\"9\n\x0bPingRequ\
    est\x12\x16\n\x06number\x18\x01\x20\x01(\x03R\x06number\x12\x12\n\x04tex\
    t\x18\x02\x20\x01(\tR\x04text\":\n\x0cPingResponse\x12\x16\n\x06number\
    \x18\x01\x20\x01(\x03R\x06number\x12\x12\n\x04text\x18\x02\x20\x01(\tR\
    \x04text\"!\n\x0bFailRequest\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04\
    code\"\x0e\n\x0cFailResponse\"$\n\nSumRequest\x12\x16\n\x06number\x18\
    \x01\x20\x01(\x03R\x06number\"\x1f\n\x0bSumResponse\x12\x10\n\x03sum\x18\
    \x01\x20\x01(\x03R\x03sum\"(\n\x0eCountUpRequest\x12\x16\n\x06number\x18\
    \x01\x20\x01(\x03R\x06number\")\n\x0fCountUpResponse\x12\x16\n\x06number\
    \x18\x01\x20\x01(\x03R\x06number\"'\n\rCumSumRequest\x12\x16\n\x06number\
    \x18\x01\x20\x01(\x03R\x06number\"\"\n\x0eCumSumResponse\x12\x10\n\x03su\
    m\x18\x01\x20\x01(\x03R\x03sum2\x87\x03\n\x0bPingService\x12H\n\x04Ping\
    \x12\x1c.connect.ping.v1.PingRequest\x1a\x1d.connect.ping.v1.PingRespons\
    e\"\x03\x90\x02\x01\x12E\n\x04Fail\x12\x1c.connect.ping.v1.FailRequest\
    \x1a\x1d.connect.ping.v1.FailResponse\"\0\x12D\n\x03Sum\x12\x1b.connect.\
    ping.v1.SumRequest\x1a\x1c.connect.ping.v1.SumResponse\"\0(\x01\x12P\n\
    \x07CountUp\x12\x1f.connect.ping.v1.CountUpRequest\x1a\x20.connect.ping.\
    v1.CountUpResponse\"\00\x01\x12O\n\x06CumSum\x12\x1e.connect.ping.v1.Cum\
    SumRequest\x1a\x1f.connect.ping.v1.CumSumResponse\"\0(\x010\x01J\xcb\x12\
    \n\x06\x12\x04\x10\0K\x01\n\xd7\x05\n\x01\x0c\x12\x03\x10\0\x12\x1a\x86\
    \x01\x20The\x20canonical\x20location\x20for\x20this\x20file\x20is\n\x20h\
    ttps://github.com/bufbuild/connect-go/blob/main/internal/proto/connect/p\
    ing/v1/ping.proto.\n2\xc3\x04\x20Copyright\x202021-2023\x20Buf\x20Techno\
    logies,\x20Inc.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\
    \n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20t\
    o\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Lice\
    nse\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITH\
    OUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\
    \x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\
    \x20specific\x20language\x20governing\x20permissions\x20and\n\x20limitat\
    ions\x20under\x20the\x20License.\n\nq\n\x01\x02\x12\x03\x14\0\x18\x1ag\
    \x20The\x20connect.ping.v1\x20package\x20contains\x20an\x20echo\x20servi\
    ce\x20designed\x20to\x20test\x20the\n\x20connect-go\x20implementation.\n\
    \n\n\n\x02\x04\0\x12\x04\x16\0\x19\x01\n\n\n\x03\x04\0\x01\x12\x03\x16\
    \x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\x02\x13\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x17\
    \x08\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x11\x12\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x18\x02\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x18\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x18\t\r\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x18\x10\x11\n\n\n\x02\x04\x01\x12\x04\x1b\0\x1e\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x1b\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x1c\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1c\x02\x07\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x1c\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x1c\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1d\x02\x12\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x1d\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1d\
    \x10\x11\n\n\n\x02\x04\x02\x12\x04\x20\0\"\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x20\x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x02\x11\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03!\x08\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\x0f\x10\n\t\n\x02\
    \x04\x03\x12\x03$\0\x17\n\n\n\x03\x04\x03\x01\x12\x03$\x08\x14\n\n\n\x02\
    \x04\x04\x12\x04&\0(\x01\n\n\n\x03\x04\x04\x01\x12\x03&\x08\x12\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03'\x02\x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03'\x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03'\x08\x0e\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03'\x11\x12\n\n\n\x02\x04\x05\x12\x04*\0,\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03*\x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x03+\
    \x02\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x03+\x08\x0b\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03+\
    \x0e\x0f\n\n\n\x02\x04\x06\x12\x04.\00\x01\n\n\n\x03\x04\x06\x01\x12\x03\
    .\x08\x16\n\x0b\n\x04\x04\x06\x02\0\x12\x03/\x02\x13\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03/\x02\x07\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03/\x08\
    \x0e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03/\x11\x12\n\n\n\x02\x04\x07\
    \x12\x042\04\x01\n\n\n\x03\x04\x07\x01\x12\x032\x08\x17\n\x0b\n\x04\x04\
    \x07\x02\0\x12\x033\x02\x13\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x033\x02\
    \x07\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x033\x08\x0e\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x033\x11\x12\n\n\n\x02\x04\x08\x12\x046\08\x01\n\n\n\x03\
    \x04\x08\x01\x12\x036\x08\x15\n\x0b\n\x04\x04\x08\x02\0\x12\x037\x02\x13\
    \n\x0c\n\x05\x04\x08\x02\0\x05\x12\x037\x02\x07\n\x0c\n\x05\x04\x08\x02\
    \0\x01\x12\x037\x08\x0e\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x037\x11\x12\n\
    \n\n\x02\x04\t\x12\x04:\0<\x01\n\n\n\x03\x04\t\x01\x12\x03:\x08\x16\n\
    \x0b\n\x04\x04\t\x02\0\x12\x03;\x02\x10\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03;\x02\x07\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03;\x08\x0b\n\x0c\n\x05\
    \x04\t\x02\0\x03\x12\x03;\x0e\x0f\n\n\n\x02\x06\0\x12\x04>\0K\x01\n\n\n\
    \x03\x06\0\x01\x12\x03>\x08\x13\nO\n\x04\x06\0\x02\0\x12\x04@\x02B\x03\
    \x1aA\x20Ping\x20sends\x20a\x20ping\x20to\x20the\x20server\x20to\x20dete\
    rmine\x20if\x20it's\x20reachable.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03@\
    \x06\n\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03@\x0b\x16\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03@!-\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03A\x04/\n\r\n\
    \x06\x06\0\x02\0\x04\"\x12\x03A\x04/\n!\n\x04\x06\0\x02\x01\x12\x03D\x02\
    1\x1a\x14\x20Fail\x20always\x20fails.\n\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03D\x06\n\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03D\x0b\x16\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03D!-\nH\n\x04\x06\0\x02\x02\x12\x03F\x025\
    \x1a;\x20Sum\x20calculates\x20the\x20sum\x20of\x20the\x20numbers\x20sent\
    \x20on\x20the\x20stream.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03F\x06\t\
    \n\x0c\n\x05\x06\0\x02\x02\x05\x12\x03F\n\x10\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03F\x11\x1b\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03F&1\nO\n\x04\
    \x06\0\x02\x03\x12\x03H\x02A\x1aB\x20CountUp\x20returns\x20a\x20stream\
    \x20of\x20the\x20numbers\x20up\x20to\x20the\x20given\x20request.\n\n\x0c\
    \n\x05\x06\0\x02\x03\x01\x12\x03H\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\
    \x12\x03H\x0e\x1c\n\x0c\n\x05\x06\0\x02\x03\x06\x12\x03H'-\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03H.=\nZ\n\x04\x06\0\x02\x04\x12\x03J\x02E\x1aM\
    \x20CumSum\x20determines\x20the\x20cumulative\x20sum\x20of\x20all\x20the\
    \x20numbers\x20sent\x20on\x20the\x20stream.\n\n\x0c\n\x05\x06\0\x02\x04\
    \x01\x12\x03J\x06\x0c\n\x0c\n\x05\x06\0\x02\x04\x05\x12\x03J\r\x13\n\x0c\
    \n\x05\x06\0\x02\x04\x02\x12\x03J\x14!\n\x0c\n\x05\x06\0\x02\x04\x06\x12\
    \x03J,2\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03J3Ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(PingRequest::generated_message_descriptor_data());
            messages.push(PingResponse::generated_message_descriptor_data());
            messages.push(FailRequest::generated_message_descriptor_data());
            messages.push(FailResponse::generated_message_descriptor_data());
            messages.push(SumRequest::generated_message_descriptor_data());
            messages.push(SumResponse::generated_message_descriptor_data());
            messages.push(CountUpRequest::generated_message_descriptor_data());
            messages.push(CountUpResponse::generated_message_descriptor_data());
            messages.push(CumSumRequest::generated_message_descriptor_data());
            messages.push(CumSumResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
